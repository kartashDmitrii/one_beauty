(function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports}var module=installedModules[moduleId]={i:moduleId,l:false,exports:{}};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.l=true;return module.exports}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.d=function(exports,name,getter){if(!__webpack_require__.o(exports,name)){Object.defineProperty(exports,name,{enumerable:true,get:getter})}};__webpack_require__.r=function(exports){if(typeof Symbol!=="undefined"&&Symbol.toStringTag){Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"})}Object.defineProperty(exports,"__esModule",{value:true})};__webpack_require__.t=function(value,mode){if(mode&1)value=__webpack_require__(value);if(mode&8)return value;if(mode&4&&typeof value==="object"&&value&&value.__esModule)return value;var ns=Object.create(null);__webpack_require__.r(ns);Object.defineProperty(ns,"default",{enumerable:true,value:value});if(mode&2&&typeof value!="string")for(var key in value)__webpack_require__.d(ns,key,function(key){return value[key]}.bind(null,key));return ns};__webpack_require__.n=function(module){var getter=module&&module.__esModule?function getDefault(){return module["default"]}:function getModuleExports(){return module};__webpack_require__.d(getter,"a",getter);return getter};__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)};__webpack_require__.p="";return __webpack_require__(__webpack_require__.s=1)})([function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",function(){return Tabs});class Tabs{constructor(btnArrow,tabArrow){this.btnArrow=btnArrow;this.tabArrow=tabArrow;this.btnArrow.forEach((elem,index)=>{elem.addEventListener("click",()=>this.switchTab(index))})}switchTab(index){this.btnArrow.forEach(btn=>{btn.classList.remove("current")});this.btnArrow[index].classList.add("current");this.tabArrow.forEach(tab=>{tab.classList.remove("current")});this.tabArrow[index].classList.add("current")}}},function(module,exports,__webpack_require__){__webpack_require__(2);module.exports=__webpack_require__(3)},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var _components_tabs__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0);if(document.querySelector(".our-specialists .slider")){document.querySelectorAll(".our-specialists .slider").forEach(slider=>{let siema=new Siema({selector:slider,duration:200,easing:"ease-out",perPage:{0:1,480:2,1024:3},startIndex:1,draggable:true,multipleDrag:true,threshold:20,loop:false,rtl:false,onInit:function(){this.selector.closest("section").querySelector(".slider-btns .btn-left").addEventListener("click",()=>{siema.prev()});this.selector.closest("section").querySelector(".slider-btns .btn-right").addEventListener("click",()=>{siema.next()})},onChange:function(){}})})}document.querySelectorAll(".tabs").forEach(tabs=>{new _components_tabs__WEBPACK_IMPORTED_MODULE_0__["a"](tabs.querySelectorAll(".tab-links .tab"),tabs.querySelectorAll(".tab-blocks .tab"))})},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var components_tabs=__webpack_require__(0);class HeaderBurger{constructor(burger,popup,close){this.burger=burger;this.flag=Array.isArray(popup);this.popup=popup;this.close=close;this.burger.addEventListener("click",()=>{this.burgerFunction()});this.close.addEventListener("click",()=>{this.closeFunction()})}burgerFunction(){if(this.flag){this.popup.forEach(elem=>{elem.classList.add("active")})}else{this.popup.classList.add("active")}document.body.classList.add("hidden")}closeFunction(){if(this.flag){this.popup.forEach(elem=>{elem.classList.remove("active")})}else{this.popup.classList.remove("active")}document.body.classList.remove("hidden")}}class headerLanguage{constructor(languageBlock){this.languageBlock=languageBlock;this.languageList=this.languageBlock.querySelector("ul");this.languageBlock.querySelector(".current").addEventListener("click",()=>{this.showBlock()})}showBlock(){let closeBlock=()=>{this.languageList.style.height=`0`;window.removeEventListener("click",closeBlock)};let blockHeight=parseInt(window.getComputedStyle(this.languageList).getPropertyValue("height"));if(blockHeight===0){this.languageList.style.height=`${this.languageList.scrollHeight}px`;setTimeout(()=>{window.addEventListener("click",closeBlock)})}else{this.languageList.style.height=`0`}}}if(document.querySelector(".slider-full-page")){document.querySelectorAll(".slider-full-page").forEach(slider=>{let sliderContainer=slider.querySelector(".container");let siema=new Siema({selector:sliderContainer,duration:200,easing:"ease-out",perPage:{0:1,1024:2},startIndex:1,draggable:false,multipleDrag:true,threshold:20,loop:false,rtl:false,onInit:function(){if(window.screen.width<767){this.selector.style.overflow="initial"}this.selector.querySelectorAll(".slide").forEach((elem,index)=>{let dot=document.createElement("button");dot.classList.add("dot");dot.innerText=elem.querySelector(".name").innerHTML;this.selector.closest(".tab").querySelector(".slider-btns .dots").appendChild(dot);dot.addEventListener("click",()=>{siema.goTo(index)})});this.selector.closest(".tab").querySelector(".slider-btns .btn-left").addEventListener("click",()=>{siema.prev()});this.selector.closest(".tab").querySelector(".slider-btns .btn-right").addEventListener("click",()=>{siema.next()})},onChange:function(){if(this.selector.closest(".tab").querySelector(".dot.current")){this.selector.closest(".tab").querySelector(".dot.current").classList.remove("current")}this.selector.closest(".tab").querySelectorAll(".dot")[siema.currentSlide].classList.add("current")}})})}if(document.querySelector(".slider-full-page-solo")){document.querySelectorAll(".slider-full-page-solo").forEach(slider=>{let sliderContainer=slider.querySelector(".container");let siema=new Siema({selector:sliderContainer,duration:300,easing:"ease-out",perPage:1,startIndex:0,draggable:false,multipleDrag:false,threshold:20,loop:false,rtl:false,onInit:function(){if(window.screen.width>1199){this.selector.style.overflow="initial"}this.selector.querySelectorAll(".slide").forEach((elem,index)=>{let dot=document.createElement("button");dot.classList.add("dot");dot.innerText=elem.dataset.dotName;this.selector.closest(".tab").querySelector(".slider-btns .dots").appendChild(dot);dot.addEventListener("click",()=>{siema.goTo(index)})});this.selector.closest(".tab").querySelector(".slider-btns .btn-left").addEventListener("click",()=>{siema.prev()});this.selector.closest(".tab").querySelector(".slider-btns .btn-right").addEventListener("click",()=>{siema.next()})},onChange:function(){if(this.selector.querySelector(".slide.current")){this.selector.querySelector(".slide.current").classList.remove("current")}this.selector.querySelectorAll(".slide")[siema.currentSlide].classList.add("current");if(this.selector.closest(".tab").querySelector(".dot.current")){this.selector.closest(".tab").querySelector(".dot.current").classList.remove("current")}this.selector.closest(".tab").querySelectorAll(".dot")[siema.currentSlide].classList.add("current");let img=this.selector.closest(".slider-full-page-solo").querySelector(".bg-img img");img.style.opacity="0";setTimeout(()=>{img.src=this.selector.querySelectorAll(".slide")[siema.currentSlide].dataset.img;img.style.opacity="1"},150)}})})}document.querySelectorAll(".tabs").forEach(tabs=>{new components_tabs["a"](tabs.querySelectorAll(".tab-links .tab"),tabs.querySelectorAll(".tab-blocks .tab"))});if(document.querySelector(".comments .slider")){let siema=new Siema({selector:".comments .slider",duration:300,easing:"ease-out",perPage:1,startIndex:0,draggable:true,multipleDrag:false,threshold:20,loop:false,rtl:false,onInit:function(){this.selector.closest(".comments").querySelector(".slider-btns .left").addEventListener("click",()=>{siema.prev()});this.selector.closest(".comments").querySelector(".slider-btns .right").addEventListener("click",()=>{siema.next()})},onChange:function(){}})}if(document.querySelector("header")){new HeaderBurger(document.querySelector(".mobile-burger"),[...document.querySelectorAll("header .mobile")],document.querySelector("header .close"));if(window.screen.width>576){new headerLanguage(document.querySelector(".header .language"))}}if(document.querySelector("#video")){window.addEventListener("resize",function(){document.querySelector("#video").style.minHeight=`${Math.round(.45*document.querySelector("#video").offsetWidth)}px`})}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
